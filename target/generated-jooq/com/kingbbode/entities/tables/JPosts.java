/*
 * This file is generated by jOOQ.
*/
package com.kingbbode.entities.tables;


import com.kingbbode.entities.JJooqPractice;
import com.kingbbode.entities.Keys;
import com.kingbbode.entities.tables.records.JPostsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPosts extends TableImpl<JPostsRecord> {

    private static final long serialVersionUID = 241894561;

    /**
     * The reference instance of <code>jooq-practice.POSTS</code>
     */
    public static final JPosts POSTS = new JPosts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPostsRecord> getRecordType() {
        return JPostsRecord.class;
    }

    /**
     * The column <code>jooq-practice.POSTS.ID</code>.
     */
    public final TableField<JPostsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq-practice.POSTS.TITLE</code>.
     */
    public final TableField<JPostsRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>jooq-practice.POSTS.CONTENT</code>.
     */
    public final TableField<JPostsRecord, String> CONTENT = createField("CONTENT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>jooq-practice.POSTS.CREATED_ON</code>.
     */
    public final TableField<JPostsRecord, Timestamp> CREATED_ON = createField("CREATED_ON", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>jooq-practice.POSTS.NAME</code>.
     */
    public final TableField<JPostsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "");

    /**
     * Create a <code>jooq-practice.POSTS</code> table reference
     */
    public JPosts() {
        this("POSTS", null);
    }

    /**
     * Create an aliased <code>jooq-practice.POSTS</code> table reference
     */
    public JPosts(String alias) {
        this(alias, POSTS);
    }

    private JPosts(String alias, Table<JPostsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JPosts(String alias, Table<JPostsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JJooqPractice.JOOQ_PRACTICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JPostsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POSTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JPostsRecord> getPrimaryKey() {
        return Keys.KEY_POSTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JPostsRecord>> getKeys() {
        return Arrays.<UniqueKey<JPostsRecord>>asList(Keys.KEY_POSTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JPosts as(String alias) {
        return new JPosts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPosts rename(String name) {
        return new JPosts(name, null);
    }
}
